public Program()
{
    //Runtime.UpdateFrequency = UpdateFrequency.Update100;
    InitScreens();
    InitComp();
    InitContainers();
}

public void Main(string argument, UpdateType Update100)
{
    InitScreens();
InitContainers();
    FindItemAmount();
    CheckItemAmount();
}

public class Component
{
    public string Name {get;}
    public string Id {get;}
    public string DefinitionId {get;}
    public int Amount {get; set;}
    public int MinAmount {get;}
    public MyItemType ItemType {get; set;}
    public MyDefinitionId Blueprint {get; set;}

    public Component(string name, string id, int amount, int minAmount)
    {
        Name = name;
        Id = id;
        Amount = amount;
        MinAmount = minAmount;
        DefinitionId = id;
    }

    public Component(string name, string id, string definitionId, int amount, int minAmount)
    {
        Name = name;
        Id = id;
        DefinitionId = definitionId;
        Amount = amount;
        MinAmount = minAmount;        
    }
}

Dictionary<string, Component> CompList = new Dictionary<string, Component>();

public void InitComp()
{
    // CHANGE MINIMUN VALUES HERE BY CHANGING THE LAST NUMBER
    CompList.Add("SteelPlate", new Component("Steel Plates", "SteelPlate", 0, 50000));
    CompList.Add("InteriorPlate", new Component("Interior Plates", "InteriorPlate", 0, 50000));
    CompList.Add("Construction", new Component("Construction Components", "Construction", "ConstructionComponent", 0, 50000));
    CompList.Add("Display", new Component("Displays", "Display", 0, 1000));
    CompList.Add("Computer", new Component("Computers", "Computer", "ComputerComponent", 0, 10000));
    CompList.Add("Girder", new Component("Girders", "Girder", "GirderComponent", 0, 10000));
    CompList.Add("LargeTube", new Component("Large Steel Tubes", "LargeTube", 0, 10000));
    CompList.Add("SmallTube", new Component("Small Steel Tubes", "SmallTube", 0, 10000));
    CompList.Add("MetalGrid", new Component("Metal Grids", "MetalGrid", 0, 10000));
    CompList.Add("Motor", new Component("Motors", "Motor", "MotorComponent", 0, 10));
    CompList.Add("Thrust", new Component("Thruster Comp.", "Thrust", "ThrustComponent", 0, 1000));
    CompList.Add("BulletproofGlass", new Component("Bulletproof Glass", "BulletproofGlass", 0, 50));
    CompList.Add("PowerCell", new Component("Power Cells", "PowerCell", 0, 10));
    CompList.Add("SolarCell", new Component("Solar Cells", "SolarCell", 0, 10));
    CompList.Add("Detector", new Component("Detector Components", "Detector", "DetectorComponent", 0, 10));
    CompList.Add("Medical", new Component("Medical Comp.", "Medical", "MedicalComponent", 0, 100));
    CompList.Add("RadioCommunication", new Component("Radio-Communication Comp.", "RadioCommunication", "RadioCommunicationComponent", 0, 10));
    CompList.Add("Reactor", new Component("Reactor Comp.", "Reactor", "ReactorComponent", 0, 10));
    CompList.Add("GravityGenerator", new Component("Gravity Comp.", "GravityGenerator", "GravityGeneratorComponent", 0, 10));
    CompList.Add("Superconductor", new Component("Superconductors", "Superconductor", 0, 10));

    foreach(var item in CompList.Values)
    {
        MyItemType itemType = new MyItemType("MyObjectBuilder_Component", item.Id);       
        string s =  "MyObjectBuilder_BlueprintDefinition/" + item.DefinitionId;
        MyDefinitionId blueprint = MyDefinitionId.Parse(s);
        item.Blueprint = blueprint;
        item.ItemType = itemType;
    }
}

List<IMyTerminalBlock> Containers = new List<IMyTerminalBlock>();
public void InitContainers()
{
    string containerGroupName = "Base Component Containers";
    var containerGroup = GridTerminalSystem.GetBlockGroupWithName(containerGroupName);
    containerGroup.GetBlocks(Containers);

    PrintToScreen($"Initializing containers", true, 5);

    foreach (var container in Containers)
    {
        PrintToScreen($"container -{container.CustomName}- found", true, 5);
    }
    
    if (Containers.Count > 0)
        PrintToScreen($"{Containers.Count} containers found", true, 5);
    else
        PrintToScreen($"No containers found", true, 5);
}

List<IMyTerminalBlock> Screens = new List<IMyTerminalBlock>();
public void InitScreens()
{
    string screenGroupName = "Base Output Screens";
    var screenGroup = GridTerminalSystem.GetBlockGroupWithName(screenGroupName);
    screenGroup.GetBlocks(Screens);

    PrintToScreen($"Initializing screens", false, 5);

    foreach (var screen in Screens)
    {
        PrintToScreen($"Screen -{screen.CustomName}- found", true, 5);
    }
    
    if (Screens.Count > 0)
        PrintToScreen($"{Screens.Count} screens found", true, 5);
    else
        PrintToScreen($"No screens found", true, 5);
}

public void PrintToScreen(string input, bool append, int screenNumber)
{
    IMyTextPanel outputScreen = (IMyTextPanel)Screens[screenNumber];
    outputScreen.WriteText(input + "\n", append);
}

// Finds all amounts of items in the base cargo containers and assemblers, only prints result for cargo containers
public void FindItemAmount()
{
    int amount = 0;
    int number = 0;
  
    foreach (var comp in CompList.Values) { comp.Amount = 0; }

    foreach (var block in Containers)
    {
        var inventory = block.GetInventory();
        if (block.CustomName.Contains("Assembler"))
        {
            IMyProductionBlock assembler = (IMyProductionBlock)block;
            inventory = assembler.OutputInventory;
        }

        number = int.Parse(block.CustomName[block.CustomName.Length -1].ToString())-1;

        if (block.CustomName.Contains("Cargo")) {
            PrintToScreen(block.CustomName, false, number);
        }

        foreach (var item in CompList.Values)
        {
            amount = (int)inventory.GetItemAmount(item.ItemType);
            item.Amount += amount;

            if (block.CustomName.Contains("Cargo")) {
                PrintToScreen($"{item.Name}: {amount}", true, number);
            }
        }
    }

    PrintToScreen("Total item amount including Assembler:", false, 2);
    foreach (var item in CompList.Values)
    {
        PrintToScreen($"{item.Name}: {item.Amount}", true, 2);
    }
}

// Checks the amount of components compared to their minimun amount and queues new components
public void CheckItemAmount()
{
    List<MyProductionItem> queue = new List<MyProductionItem>();
    Dictionary<string, int> queueAmount = new Dictionary<string, int>();
    for (int i = 0; i<4; i++)
    {
        IMyProductionBlock assembler = (IMyProductionBlock) Containers[i];
        assembler.GetQueue(queue);
        foreach (var item in queue)
        {
            string[] name = item.BlueprintId.ToString().Split('/');            
            
            if (queueAmount.ContainsKey(name[1]))         
                queueAmount[name[1]] += (int)item.Amount;                
            else
                queueAmount.Add(name[1], (int)item.Amount);           
        }
    }
    PrintToScreen($"\nCurrently queued components:", false, 3);
    foreach (var item in queueAmount)
    {
        PrintToScreen($"{item.Key}: {item.Value}", true, 3);
    }
    
    PrintToScreen ($"\nComponents below minimun amount:", true, 3);
    foreach (var comp in CompList.Values)
    {
        int itemQueueAmount = queueAmount.ContainsKey(comp.DefinitionId)? queueAmount[comp.DefinitionId] : 0;
        if ((comp.Amount + itemQueueAmount) < comp.MinAmount)
        {
            int diff = comp.MinAmount - (comp.Amount + itemQueueAmount);
            PrintToScreen ($"{comp.Name} by {diff}", true, 3);

            IMyAssembler assembler = FindAvailableAssembler();

            assembler.AddQueueItem(comp.Blueprint, (MyFixedPoint)diff);
        }
    }
}

public IMyAssembler FindAvailableAssembler()
{
    IMyAssembler assembler = null;
    List<MyProductionItem> queue = new List<MyProductionItem>();
    int prevMax = 0;
    int index = 0;
    for (int i = 0; i<4; i++)
    {
        assembler = (IMyAssembler)Containers[i];
        if (assembler.IsQueueEmpty)
            return assembler;

        assembler.GetQueue(queue);
        int currentMax = 0;
        foreach (var item in queue)
        {
            currentMax += (int)item.Amount;
        }

        if (currentMax < prevMax || prevMax == 0)
        {
            prevMax = currentMax;
            index = i;
        }
    }
    
    return (IMyAssembler)Containers[index];
}